/**
 * This file was auto-generated by openapi-typescript against
 * https://api.recordedfuture.com/identity/openapi.
 */

/* eslint-disable no-use-before-define */

export interface paths {
  '/identity/detections': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** [Beta] Get detections */
    post: operations['detectionsProxy'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/identity/incident/report': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Provides an exposure incident report for a single malware log */
    post: operations['incidentReport'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/identity/hostname/lookup': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Lookup hostname for exposure */
    post: operations['hostnameLookup'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/identity/password/lookup': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Lookup passwords for exposure */
    post: operations['passwordLookup'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/identity/ip/lookup': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Lookup ip for exposure */
    post: operations['ipLookup'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/identity/credentials/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Search credential data for a set of domains */
    post: operations['search'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/identity/credentials/lookup': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Lookup credential data for a set of subjects */
    post: operations['lookup'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/identity/metadata/dump/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Search dump metadata for given names */
    post: operations['searchDumpMetadata'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Location: {
      country?: {
        name?: string;
        displayName?: string;
        countryCode?: string;
        alpha2Code?: string;
        alpha3Code?: string;
      };
      postal_code?: string;
      city?: string;
      address?: string;
      address1?: string;
      address2?: string;
      state?: string;
      zip?: string;
    };
    DetectionsFilter: {
      novel_only?: boolean;
      domains?: string[];
      /** @enum {string} */
      detection_type?: 'External' | 'Workforce';
      /** @enum {string} */
      cookies?: 'Cookies' | 'UnexpiredCookies';
      created?: {
        /** Format: date-time */
        gte?: string;
        /** Format: date-time */
        lt?: string;
      };
    };
    DetectionsLeakedPassword: {
      type?: string;
      hashes?: components['schemas']['DetectionsPasswordHash'][];
      properties?: (
        | 'Letter'
        | 'Number'
        | 'Symbol'
        | 'UpperCase'
        | 'LowerCase'
        | 'MixedCase'
        | 'AtLeast8Characters'
        | 'AtLeast10Characters'
        | 'AtLeast12Characters'
        | 'AtLeast16Characters'
        | 'AtLeast24Characters'
        | 'Cookies'
        | 'UnexpiredCookies'
        | 'AuthorizationTechnology'
        | 'MalwareOnly'
      )[];
      cleartext_hint?: string;
      cleartext?: string;
    };
    MalwareFamily: {
      name?: string;
      id?: string;
    };
    IncidentReportCredentials: {
      authorization_domain?: string;
      email_or_login?: string;
      password?: string;
      password_sha1?: string;
      domain_category?: string;
      domain_technology?: string;
      contains_high_risk_technologies?: boolean;
      contains_cookies?: boolean;
      contains_active_cookies?: boolean;
    };
    PasswordLookupRequest: {
      passwords?: components['schemas']['PasswordHash'][];
    };
    SinglePasswordLookupResult: {
      password?: components['schemas']['PasswordHash'];
      /** @enum {string} */
      exposure_status?: 'NeverExposed' | 'Uncommon' | 'Common';
    };
    CountryCodeMappingModel: {
      name?: string;
      displayName?: string;
      countryCode?: string;
      alpha2Code?: string;
      alpha3Code?: string;
    };
    DomainLogin: {
      login?: string;
      login_sha1?: string;
      domain?: string;
    };
    CredentialsSearchRequest: {
      domains?: string[];
      domain_types?: ('Authorization' | 'Email')[];
      filter?: {
        /**
         * Format: date-time
         * @description Only include breaches this time onwards
         */
        first_downloaded_gte?: string;
        /**
         * Format: date-time
         * @description Only include breaches this time onwards
         */
        latest_downloaded_gte?: string;
        /**
         * Format: date-time
         * @description Only include exfiltrations this time onwards
         */
        exfiltration_date_gte?: string;
        /** @description Only include breaches of passwords that exhibit these properties */
        properties?: (
          | 'Letter'
          | 'Number'
          | 'Symbol'
          | 'UpperCase'
          | 'LowerCase'
          | 'MixedCase'
          | 'AtLeast8Characters'
          | 'AtLeast10Characters'
          | 'AtLeast12Characters'
          | 'AtLeast16Characters'
          | 'AtLeast24Characters'
          | 'Cookies'
          | 'UnexpiredCookies'
          | 'AuthorizationTechnology'
          | 'MalwareOnly'
        )[];
        /** @description Only include credentials from breaches that exhibit these properties */
        breach_properties?: {
          name?: string;
          /** Format: date-time */
          date?: string;
        };
        /** @description Only include credentials from dumps that exhibit these properties */
        dump_properties?: {
          name?: string;
          /** Format: date-time */
          date?: string;
        };
        /** @description Only include credentials with these username properties */
        username_properties?: 'Email'[];
        /** @description Only include credentials with these authorization technologies */
        authorization_technologies?: string[];
        /** @description Only include credentials with these authorization protocols */
        authorization_protocols?: string[];
        /** @description Only include credentials with these malware families */
        malware_families?: string[];
      };
      offset?: string;
      limit?: number;
      organization_id?: string;
    };
    IncidentReportResponse: {
      details?: {
        malware_family?: string;
        os?: string;
        os_username?: string;
        malware_file?: string;
        timezone?: string;
        uac?: string;
        exfiltration_date?: string;
        antivirus?: string;
        ip_address?: string;
        postal_code?: string;
        country?: string;
      };
      count?: number;
      total_count?: number;
      next_offset?: string;
      credentials?: components['schemas']['IncidentReportCredentials'][];
    };
    Cookie: {
      dns?: string;
      name?: string;
      http?: boolean;
      /** Format: date-time */
      expiration?: string;
      secure?: boolean;
      value?: string;
    };
    DumpMetadataSearchRequest: {
      names?: string[];
      limit?: number;
    };
    SecretDetails: {
      type?: string;
      /** @description Known hashes for this secret */
      hashes?: components['schemas']['PasswordHash'][];
      details?: {
        /** @description Properties exhibited by the password */
        properties?: (
          | 'Letter'
          | 'Number'
          | 'Symbol'
          | 'UpperCase'
          | 'LowerCase'
          | 'MixedCase'
          | 'AtLeast8Characters'
          | 'AtLeast10Characters'
          | 'AtLeast12Characters'
          | 'AtLeast16Characters'
          | 'AtLeast24Characters'
          | 'Cookies'
          | 'UnexpiredCookies'
          | 'AuthorizationTechnology'
          | 'MalwareOnly'
        )[];
        /**
         * @description A ranking of how common this password is
         * @enum {string}
         */
        rank?: 'Top100kCommonPasswords' | 'TopMillionCommonPasswords';
        /** @description The password as clear text */
        clear_text_value?: string;
        /** @description First two characters of the cleartext password */
        clear_text_hint?: string;
      };
      effectively_clear?: boolean;
    };
    Technology: {
      name?: string;
      id?: string;
      category?: string;
    };
    PasswordLookupResponse: {
      results?: components['schemas']['SinglePasswordLookupResult'][];
    };
    IncidentReportDetails: {
      malware_family?: string;
      os?: string;
      os_username?: string;
      malware_file?: string;
      timezone?: string;
      uac?: string;
      exfiltration_date?: string;
      antivirus?: string;
      ip_address?: string;
      postal_code?: string;
      country?: string;
    };
    HostnameLookupRequest: {
      hostname?: string;
      filter?: {
        /**
         * Format: date-time
         * @description Only include breaches this time onwards
         */
        first_downloaded_gte?: string;
        /**
         * Format: date-time
         * @description Only include breaches this time onwards
         */
        latest_downloaded_gte?: string;
        /**
         * Format: date-time
         * @description Only include exfiltrations this time onwards
         */
        exfiltration_date_gte?: string;
        /** @description Only include breaches of passwords that exhibit these properties */
        properties?: (
          | 'Letter'
          | 'Number'
          | 'Symbol'
          | 'UpperCase'
          | 'LowerCase'
          | 'MixedCase'
          | 'AtLeast8Characters'
          | 'AtLeast10Characters'
          | 'AtLeast12Characters'
          | 'AtLeast16Characters'
          | 'AtLeast24Characters'
          | 'Cookies'
          | 'UnexpiredCookies'
          | 'AuthorizationTechnology'
          | 'MalwareOnly'
        )[];
        /** @description Only include credentials from breaches that exhibit these properties */
        breach_properties?: {
          name?: string;
          /** Format: date-time */
          date?: string;
        };
        /** @description Only include credentials from dumps that exhibit these properties */
        dump_properties?: {
          name?: string;
          /** Format: date-time */
          date?: string;
        };
        /** @description Only include credentials with these username properties */
        username_properties?: 'Email'[];
        /** @description Only include credentials with these authorization technologies */
        authorization_technologies?: string[];
        /** @description Only include credentials with these authorization protocols */
        authorization_protocols?: string[];
        /** @description Only include credentials with these malware families */
        malware_families?: string[];
      };
      limit?: number;
      offset?: string;
      organization_id?: string;
    };
    SearchResponseIdentity: Record<string, never>;
    AuthorizationService: {
      url?: string;
      domain?: string;
      fqdn?: string;
      technology?: components['schemas']['Technology'][];
      protocols?: string[];
    };
    LeakedIdentity: {
      identity?: components['schemas']['IdentityDetails'];
      count?: number;
      credentials?: components['schemas']['Credentials'][];
    };
    IPLookupRequest: {
      ip?: string;
      range?: {
        gte?: string;
        gt?: string;
        lte?: string;
        lt?: string;
      };
      filter?: {
        /**
         * Format: date-time
         * @description Only include breaches this time onwards
         */
        first_downloaded_gte?: string;
        /**
         * Format: date-time
         * @description Only include breaches this time onwards
         */
        latest_downloaded_gte?: string;
        /**
         * Format: date-time
         * @description Only include exfiltrations this time onwards
         */
        exfiltration_date_gte?: string;
        /** @description Only include breaches of passwords that exhibit these properties */
        properties?: (
          | 'Letter'
          | 'Number'
          | 'Symbol'
          | 'UpperCase'
          | 'LowerCase'
          | 'MixedCase'
          | 'AtLeast8Characters'
          | 'AtLeast10Characters'
          | 'AtLeast12Characters'
          | 'AtLeast16Characters'
          | 'AtLeast24Characters'
          | 'Cookies'
          | 'UnexpiredCookies'
          | 'AuthorizationTechnology'
          | 'MalwareOnly'
        )[];
        /** @description Only include credentials from breaches that exhibit these properties */
        breach_properties?: {
          name?: string;
          /** Format: date-time */
          date?: string;
        };
        /** @description Only include credentials from dumps that exhibit these properties */
        dump_properties?: {
          name?: string;
          /** Format: date-time */
          date?: string;
        };
        /** @description Only include credentials with these username properties */
        username_properties?: 'Email'[];
        /** @description Only include credentials with these authorization technologies */
        authorization_technologies?: string[];
        /** @description Only include credentials with these authorization protocols */
        authorization_protocols?: string[];
        /** @description Only include credentials with these malware families */
        malware_families?: string[];
      };
      limit?: number;
      offset?: string;
      organization_id?: string;
    };
    CleartextPasswordDetails: {
      /** @description Properties exhibited by the password */
      properties?: (
        | 'Letter'
        | 'Number'
        | 'Symbol'
        | 'UpperCase'
        | 'LowerCase'
        | 'MixedCase'
        | 'AtLeast8Characters'
        | 'AtLeast10Characters'
        | 'AtLeast12Characters'
        | 'AtLeast16Characters'
        | 'AtLeast24Characters'
        | 'Cookies'
        | 'UnexpiredCookies'
        | 'AuthorizationTechnology'
        | 'MalwareOnly'
      )[];
      /**
       * @description A ranking of how common this password is
       * @enum {string}
       */
      rank?: 'Top100kCommonPasswords' | 'TopMillionCommonPasswords';
      /** @description The password as clear text */
      clear_text_value?: string;
      /** @description First two characters of the cleartext password */
      clear_text_hint?: string;
    };
    MetadataDumpResponse: {
      dumps?: components['schemas']['DumpMetadata'][];
    };
    SearchResponse: {
      identities?: components['schemas']['SearchResponseIdentity'][];
      count?: number;
      count_relation?: string;
      next_offset?: string;
    };
    DumpProperties: {
      name?: string;
      /** Format: date-time */
      date?: string;
    };
    DetectionsDateFilter: {
      /** Format: date-time */
      gte?: string;
      /** Format: date-time */
      lt?: string;
    };
    DetectionsRequest: {
      organization_id?: string[];
      include_enterprise_level?: boolean;
      filter?: {
        novel_only?: boolean;
        domains?: string[];
        /** @enum {string} */
        detection_type?: 'External' | 'Workforce';
        /** @enum {string} */
        cookies?: 'Cookies' | 'UnexpiredCookies';
        created?: {
          /** Format: date-time */
          gte?: string;
          /** Format: date-time */
          lt?: string;
        };
      };
      limit?: number;
      offset?: string;
    };
    IdentityRequestFilter: {
      /**
       * Format: date-time
       * @description Only include breaches this time onwards
       */
      first_downloaded_gte?: string;
      /**
       * Format: date-time
       * @description Only include breaches this time onwards
       */
      latest_downloaded_gte?: string;
      /**
       * Format: date-time
       * @description Only include exfiltrations this time onwards
       */
      exfiltration_date_gte?: string;
      /** @description Only include breaches of passwords that exhibit these properties */
      properties?: (
        | 'Letter'
        | 'Number'
        | 'Symbol'
        | 'UpperCase'
        | 'LowerCase'
        | 'MixedCase'
        | 'AtLeast8Characters'
        | 'AtLeast10Characters'
        | 'AtLeast12Characters'
        | 'AtLeast16Characters'
        | 'AtLeast24Characters'
        | 'Cookies'
        | 'UnexpiredCookies'
        | 'AuthorizationTechnology'
        | 'MalwareOnly'
      )[];
      /** @description Only include credentials from breaches that exhibit these properties */
      breach_properties?: {
        name?: string;
        /** Format: date-time */
        date?: string;
      };
      /** @description Only include credentials from dumps that exhibit these properties */
      dump_properties?: {
        name?: string;
        /** Format: date-time */
        date?: string;
      };
      /** @description Only include credentials with these username properties */
      username_properties?: 'Email'[];
      /** @description Only include credentials with these authorization technologies */
      authorization_technologies?: string[];
      /** @description Only include credentials with these authorization protocols */
      authorization_protocols?: string[];
      /** @description Only include credentials with these malware families */
      malware_families?: string[];
    };
    DumpMetadata: {
      name?: string;
      source?: string;
      description?: string;
      /** Format: date-time */
      downloaded?: string;
      type?: string;
      breaches?: components['schemas']['BreachMetadata'][];
      compromise?: {
        /** Format: date-time */
        exfiltration_date?: string;
        os?: string;
        os_username?: string;
        malware_file?: string;
        timezone?: string;
        computer_name?: string;
        uac?: string;
        antivirus?: string[];
      };
      infrastructure?: {
        ip?: string;
      };
      location?: {
        country?: {
          name?: string;
          displayName?: string;
          countryCode?: string;
          alpha2Code?: string;
          alpha3Code?: string;
        };
        postal_code?: string;
        city?: string;
        address?: string;
        address1?: string;
        address2?: string;
        state?: string;
        zip?: string;
      };
    };
    BreachMetadata: {
      name?: string;
      domain?: string;
      type?: string;
      /** Format: date-time */
      breached?: string;
      /** Format: date-time */
      start?: string;
      /** Format: date-time */
      stop?: string;
      /** @enum {string} */
      precision?: 'year' | 'month' | 'day';
      description?: string;
      site_description?: string;
    };
    IPRange: {
      gte?: string;
      gt?: string;
      lte?: string;
      lt?: string;
    };
    LookupResponse: {
      identities?: components['schemas']['LeakedIdentity'][];
      count?: number;
      next_offset?: string;
    };
    IncidentReportRequest: {
      source?: string;
      include_details?: boolean;
      organization_id?: string;
      limit?: number;
      offset?: string;
    };
    Infrastructure: {
      ip?: string;
    };
    IdentityDetails: {
      subjects?: string[];
    };
    BreachProperties: {
      name?: string;
      /** Format: date-time */
      date?: string;
    };
    Detection: {
      id?: string;
      organization_id?: string;
      novel?: boolean;
      /** @enum {string} */
      type?: 'External' | 'Workforce';
      subject?: string;
      password?: {
        type?: string;
        hashes?: components['schemas']['DetectionsPasswordHash'][];
        properties?: (
          | 'Letter'
          | 'Number'
          | 'Symbol'
          | 'UpperCase'
          | 'LowerCase'
          | 'MixedCase'
          | 'AtLeast8Characters'
          | 'AtLeast10Characters'
          | 'AtLeast12Characters'
          | 'AtLeast16Characters'
          | 'AtLeast24Characters'
          | 'Cookies'
          | 'UnexpiredCookies'
          | 'AuthorizationTechnology'
          | 'MalwareOnly'
        )[];
        cleartext_hint?: string;
        cleartext?: string;
      };
      authorization_service?: {
        url?: string;
        domain?: string;
        fqdn?: string;
        technology?: components['schemas']['Technology'][];
        protocols?: string[];
      };
      cookies?: components['schemas']['Cookie'][];
      malware_family?: {
        name?: string;
        id?: string;
      };
      dump?: components['schemas']['DumpMetadata'];
      /** Format: date-time */
      created?: string;
    };
    Compromise: {
      /** Format: date-time */
      exfiltration_date?: string;
      os?: string;
      os_username?: string;
      malware_file?: string;
      timezone?: string;
      computer_name?: string;
      uac?: string;
      antivirus?: string[];
    };
    DetectionsPasswordHash: {
      /** @enum {string} */
      algorithm?:
        | 'SHA1'
        | 'SHA256'
        | 'HASH32'
        | 'HASH40'
        | 'HASH64'
        | 'HASH96'
        | 'HASH128'
        | 'BCRYPT'
        | 'PHPASS'
        | 'HASHCAT_HEX'
        | 'BASE64'
        | 'SSHA'
        | 'PBKDF2_SHA256'
        | 'BASE64_HASH32'
        | 'BASE64_HASH40'
        | 'BASE64_HASH128'
        | 'BASE64_INTEGER_HASH32'
        | 'BASE64_INTEGER_HASH40'
        | 'BASE64_INTEGER_HASH64'
        | 'BASE64_INTEGER_HASH96'
        | 'BASE64_INTEGER_HASH128'
        | 'MYSQL_SHA_V41PLUS'
        | 'NTLM'
        | 'MD5';
      hash?: string;
      hash_prefix?: string;
    };
    PasswordHash: Record<string, never>;
    Credentials: {
      subject?: string;
      dumps?: components['schemas']['DumpMetadata'][];
      /** Format: date-time */
      first_downloaded?: string;
      /** Format: date-time */
      latest_downloaded?: string;
      exposed_secret?: components['schemas']['SecretDetails'];
      compromise?: {
        /** Format: date-time */
        exfiltration_date?: string;
      };
      authorization_service?: {
        url?: string;
        domain?: string;
        fqdn?: string;
        technology?: components['schemas']['Technology'][];
        protocols?: string[];
      };
      authorization_services?: components['schemas']['AuthorizationService'][];
      malware_family?: {
        name?: string;
        id?: string;
      };
      cookies?: components['schemas']['Cookie'][];
    };
    DetectionsResponse: {
      total?: number;
      detections?: components['schemas']['Detection'][];
      next_offset?: string;
    };
    CredentialsLookupRequest: {
      subjects?: string[];
      subjects_sha1?: string[];
      subjects_login?: components['schemas']['DomainLogin'][];
      filter?: {
        /**
         * Format: date-time
         * @description Only include breaches this time onwards
         */
        first_downloaded_gte?: string;
        /**
         * Format: date-time
         * @description Only include breaches this time onwards
         */
        latest_downloaded_gte?: string;
        /**
         * Format: date-time
         * @description Only include exfiltrations this time onwards
         */
        exfiltration_date_gte?: string;
        /** @description Only include breaches of passwords that exhibit these properties */
        properties?: (
          | 'Letter'
          | 'Number'
          | 'Symbol'
          | 'UpperCase'
          | 'LowerCase'
          | 'MixedCase'
          | 'AtLeast8Characters'
          | 'AtLeast10Characters'
          | 'AtLeast12Characters'
          | 'AtLeast16Characters'
          | 'AtLeast24Characters'
          | 'Cookies'
          | 'UnexpiredCookies'
          | 'AuthorizationTechnology'
          | 'MalwareOnly'
        )[];
        /** @description Only include credentials from breaches that exhibit these properties */
        breach_properties?: {
          name?: string;
          /** Format: date-time */
          date?: string;
        };
        /** @description Only include credentials from dumps that exhibit these properties */
        dump_properties?: {
          name?: string;
          /** Format: date-time */
          date?: string;
        };
        /** @description Only include credentials with these username properties */
        username_properties?: 'Email'[];
        /** @description Only include credentials with these authorization technologies */
        authorization_technologies?: string[];
        /** @description Only include credentials with these authorization protocols */
        authorization_protocols?: string[];
        /** @description Only include credentials with these malware families */
        malware_families?: string[];
      };
      organization_id?: string;
      limit?: number;
      offset?: string;
    };
    DeprecatedCompromise: {
      /** Format: date-time */
      exfiltration_date?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  detectionsProxy: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['DetectionsRequest'];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DetectionsResponse'];
        };
      };
    };
  };
  incidentReport: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['IncidentReportRequest'];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IncidentReportResponse'];
        };
      };
    };
  };
  hostnameLookup: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['HostnameLookupRequest'];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LookupResponse'];
        };
      };
    };
  };
  passwordLookup: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PasswordLookupRequest'];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PasswordLookupResponse'];
        };
      };
    };
  };
  ipLookup: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['IPLookupRequest'];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LookupResponse'];
        };
      };
    };
  };
  search: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['CredentialsSearchRequest'];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SearchResponse'];
        };
      };
    };
  };
  lookup: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['CredentialsLookupRequest'];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LookupResponse'];
        };
      };
    };
  };
  searchDumpMetadata: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['DumpMetadataSearchRequest'];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MetadataDumpResponse'];
        };
      };
    };
  };
}
